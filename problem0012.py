'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

\begin{align}
\mathbf 1 &amp;\colon 1\\
\mathbf 3 &amp;\colon 1,3\\
\mathbf 6 &amp;\colon 1,2,3,6\\
\mathbf{10} &amp;\colon 1,2,5,10\\
\mathbf{15} &amp;\colon 1,3,5,15\\
\mathbf{21} &amp;\colon 1,3,7,21\\
\mathbf{28} &amp;\colon 1,2,4,7,14,28
\end{align}

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

def quantFatores(num):
    """Returns the number of divisors of a given number."""
    count = 0
    sqrt_num = int(num**0.5)
    for i in range(1, sqrt_num + 1):
        if num % i == 0:
            count += 2  # i and num // i
    if sqrt_num * sqrt_num == num:  # Perfect square
        count -= 1
    return count

def an(n):
    return int(n * (n + 1) / 2)

aux = True
k = 1
while aux:
    num = an(k)
    k += 1
    qfator = quantFatores(num)
    if qfator > 500:
        print(num)
        aux = False